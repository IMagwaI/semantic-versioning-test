# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: '*'

jobs:
  quality:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        os: [ubuntu-latest]
        # See supported Node.js releasee schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [quality]
    steps: 
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run semantic-release
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Update package.json version
      run: |
        current_version=$(node -p "require('./package.json').version")
        new_version=$(npx semantic-release-cli --dry-run | jq -r .nextRelease.version)
        if [ "$current_version" != "$new_version" ]; then
          echo "Updating package.json version to $new_version"
          npx json -I -f ./package.json -e "this.version='$new_version'"
          git add ./package.json
          git commit -m "chore(release): $new_version"
          git push
        else
          echo "No version update needed."
        fi
      working-directory: ./

